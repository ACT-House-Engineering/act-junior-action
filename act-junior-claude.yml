name: 'ACT Junior Claude'
description: 'A GitHub Action that runs Claude Code against issues and creates pull requests with solutions'
author: 'ACT House Engineering'

branding:
  icon: 'code'
  color: 'blue'

inputs:
  github-token:
    description: 'GitHub token with repository access permissions'
    required: true
  anthropic-api-key:
    description: 'Anthropic API key for Claude Code'
    required: true
  trigger-keyword:
    description: 'Keyword to trigger the action (e.g., @claude-code)'
    required: false
    default: '@act-junior-claude'
  claude-model:
    description: 'Claude model to use'
    required: false
    default: 'claude-3-7-sonnet-20250219'
  bot-username:
    description: 'Name to show for bot comments'
    required: false
    default: 'ðŸ§  ACT Junior Claude'
  git-email:
    description: 'Email to use for git commits'
    required: false
    default: 'claude@act.house'

outputs:
  pull-request-url:
    description: 'URL of the created pull request'
    value: ${{ steps.create_pr.outputs.pull-request-url }}
  success:
    description: 'Whether the action completed successfully'
    value: ${{ steps.run_claude.outputs.success }}
  modified-files:
    description: 'List of files modified by the action'
    value: ${{ steps.run_claude.outputs.modified_files }}

runs:
  using: 'composite'
  steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ inputs.github-token }}
        
    - name: Install required utilities
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y jq

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: lts/*

    - name: Install Claude Code
      shell: bash
      run: |
        echo "Installing Claude Code CLI..."
        npm install -g @anthropic-ai/claude-code
        echo "Claude Code installation completed."

    - name: Extract issue details
      id: issue_info
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.github-token }}
        TRIGGER_KEYWORD: ${{ inputs.trigger-keyword }}
        EVENT_NAME: ${{ github.event_name }}
        EVENT_PATH: ${{ github.event_path }}
      run: |
        # Create temporary directory
        mkdir -p ./.temp
        
        # Extract issue number based on event type
        if [[ "$EVENT_NAME" == "issues" ]]; then
          ISSUE_NUMBER=$(jq -r .issue.number "$EVENT_PATH")
          ISSUE_TITLE=$(jq -r .issue.title "$EVENT_PATH")
          ISSUE_BODY=$(jq -r .issue.body "$EVENT_PATH")
          
        elif [[ "$EVENT_NAME" == "pull_request" ]]; then
          ISSUE_NUMBER=$(jq -r .pull_request.number "$EVENT_PATH")
          ISSUE_TITLE=$(jq -r .pull_request.title "$EVENT_PATH")
          ISSUE_BODY=$(jq -r .pull_request.body "$EVENT_PATH")
          
        elif [[ "$EVENT_NAME" == "issue_comment" || "$EVENT_NAME" == "pull_request_review_comment" ]]; then
          # For comments, we need to check if they're on an issue or PR
          if [[ $(jq -r 'has("issue")' "$EVENT_PATH") == "true" ]]; then
            ISSUE_NUMBER=$(jq -r .issue.number "$EVENT_PATH")
            ISSUE_TITLE=$(jq -r .issue.title "$EVENT_PATH")
            ISSUE_BODY=$(jq -r .comment.body "$EVENT_PATH")
          else
            ISSUE_NUMBER=$(jq -r .pull_request.number "$EVENT_PATH")
            ISSUE_TITLE=$(jq -r .pull_request.title "$EVENT_PATH")
            ISSUE_BODY=$(jq -r .comment.body "$EVENT_PATH")
          fi
        fi
        
        # Output the extracted information
        echo "issue-number=$ISSUE_NUMBER" >> $GITHUB_OUTPUT
        echo "issue-title=$ISSUE_TITLE" >> $GITHUB_OUTPUT
        
        # Save issue body to a file to handle multi-line content
        echo "$ISSUE_BODY" > ./.temp/issue_body.txt
        echo "issue-body-file=./.temp/issue_body.txt" >> $GITHUB_OUTPUT

    - name: Reply to issue/comment
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.github-token }}
        ISSUE_NUMBER: ${{ steps.issue_info.outputs.issue-number }}
        BOT_USERNAME: ${{ inputs.bot-username }}
      run: |
        if [[ -n "$ISSUE_NUMBER" ]]; then
          WORKFLOW_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          MESSAGE="Hi there! I'm ${BOT_USERNAME} and I'm analyzing your request. You can follow my progress at: $WORKFLOW_URL"
          
          gh issue comment "$ISSUE_NUMBER" --body "$MESSAGE"
        fi

    - name: Create solution branch
      id: solution
      shell: bash
      run: |
        # Get issue details
        ISSUE_NUMBER="${{ steps.issue_info.outputs.issue-number }}"
        ISSUE_TITLE="${{ steps.issue_info.outputs.issue-title }}"
        ISSUE_BODY_FILE="${{ steps.issue_info.outputs.issue-body-file }}"
        ISSUE_BODY=$(cat "$ISSUE_BODY_FILE")
        TIMESTAMP=$(date +%s)
        
        # Extract target files from issue title and body
        TARGET_FILES=$(echo "$ISSUE_TITLE $ISSUE_BODY" | grep -o -E '(\.js|\.jsx|\.ts|\.tsx|\.md|\.css|\.html|\.json|\.yml|\.yaml)\b' | sort | uniq | tr '\n' ' ')
        
        # Create a branch for the solution
        git checkout -b claude-fix/issue-$ISSUE_NUMBER-$TIMESTAMP
        
        # Create a prompt file for Claude
        mkdir -p ./.temp
        cat << EOF > ./.temp/issue_prompt.txt
        # Issue #$ISSUE_NUMBER: $ISSUE_TITLE
        
        $(cat "$ISSUE_BODY_FILE")
        
        ## Task
        Please analyze this issue and implement a solution. Make the necessary code changes to fix the issue described above.
        
        Focus specifically on the following files if relevant: $TARGET_FILES
        
        Please ensure you:
        1. Only modify the necessary files
        2. Test your changes if applicable
        3. Follow the existing code style and conventions
        4. Consider edge cases in your implementation
        5. Do not commit temporary files or debugging artifacts
        EOF
        
        # Output values for next steps
        echo "branch=claude-fix/issue-$ISSUE_NUMBER-$TIMESTAMP" >> $GITHUB_OUTPUT
        echo "target_files=$TARGET_FILES" >> $GITHUB_OUTPUT

    - name: Run Claude Code
      id: run_claude
      shell: bash
      env:
        ANTHROPIC_API_KEY: ${{ inputs.anthropic-api-key }}
        CLAUDE_MODEL: ${{ inputs.claude-model }}
      run: |
        # Create config file for Claude Code
        mkdir -p ~/.claude
        cat << EOF > ~/.claude/config.json
        {
          "defaultModel": "$CLAUDE_MODEL",
          "modelsConfig": {
            "$CLAUDE_MODEL": {
              "modelName": "$CLAUDE_MODEL",
              "provider": "anthropic"
            }
          }
        }
        EOF
        
        # Run Claude Code to solve the issue
        PROMPT_FILE="./.temp/issue_prompt.txt"
        PROMPT=$(cat "$PROMPT_FILE")
        
        set +e  # Don't exit on error
        claude -p "$PROMPT" --allowedTools "Bash(git diff:*)" "Bash(git status:*)" "Edit" "Replace" "GlobTool" "GrepTool" "View"
        CLAUDE_EXIT=$?
        set -e  # Restore exit on error
        
        # Get list of modified files
        MODIFIED_FILES=$(git status --porcelain | grep -v "^??" | grep -v "./.temp/" | awk '{print $2}')
        
        if [ -z "$MODIFIED_FILES" ]; then
          echo "No changes were made by Claude Code"
          echo "success=false" >> $GITHUB_OUTPUT
          echo "modified_files=" >> $GITHUB_OUTPUT
        else
          echo "Modified files: $MODIFIED_FILES"
          echo "success=true" >> $GITHUB_OUTPUT
          echo "modified_files=$MODIFIED_FILES" >> $GITHUB_OUTPUT
        fi

    - name: Commit and push changes
      if: steps.run_claude.outputs.success == 'true'
      shell: bash
      run: |
        # Configure git
        git config --global user.name "${{ inputs.bot-username }}"
        git config --global user.email "${{ inputs.git-email }}"
        
        ISSUE_NUMBER="${{ steps.issue_info.outputs.issue-number }}"
        ISSUE_TITLE="${{ steps.issue_info.outputs.issue-title }}"
        MODIFIED_FILES="${{ steps.run_claude.outputs.modified_files }}"
        
        # Stage and commit
        git add $MODIFIED_FILES
        git commit -m "Fix #$ISSUE_NUMBER: $ISSUE_TITLE

        ðŸ§  Generated with ACT Junior Claude"
        
        # Push changes
        git push origin "${{ steps.solution.outputs.branch }}"

    - name: Create Pull Request
      if: steps.run_claude.outputs.success == 'true'
      id: create_pr
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.github-token }}
        ISSUE_NUMBER: ${{ steps.issue_info.outputs.issue-number }}
        ISSUE_TITLE: ${{ steps.issue_info.outputs.issue-title }}
        BRANCH_NAME: ${{ steps.solution.outputs.branch }}
      run: |
        # Create PR body
        PR_BODY="Fixes #$ISSUE_NUMBER
        
        This pull request was automatically generated by ${{ inputs.bot-username }} to address the issue.
        
        ## Changes Made
        - Analyzed issue requirements
        - Applied necessary code changes
        - Tested the solution
        
        This PR was created by ACT Junior Claude using the Claude ${{ inputs.claude-model }} model.
        
        Please review the changes and provide feedback."
        
        # Create the PR
        PR_URL=$(gh pr create --title "Fix: $ISSUE_TITLE" \
                             --body "$PR_BODY" \
                             --base main \
                             --head "$BRANCH_NAME" \
                             --label "claude-generated")
        
        echo "PR created: $PR_URL"
        echo "pull-request-url=$PR_URL" >> $GITHUB_OUTPUT
        
        # Comment on the issue with a link to the PR
        gh issue comment "$ISSUE_NUMBER" --body "I've created a pull request to address this issue: $PR_URL

        The solution was implemented using Claude Code. Please review the changes and let me know if you need any adjustments."

    - name: Cleanup
      if: always()
      shell: bash
      run: |
        # Clean up temporary files
        rm -rf ./.temp
        
        echo "Cleanup completed"