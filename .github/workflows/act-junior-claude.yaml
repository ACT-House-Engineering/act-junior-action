name: ðŸ§  ACT Junior / Claude
# Workflow that uses Claude Code to solve issues and create PRs

on:
  issues:
    types: [opened, edited, labeled]
  pull_request:
    types: [edited, labeled]
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  push:
    paths:
      - '.github/workflows/act-junior-claude.yaml'

# Required permissions for creating PRs from workflows
permissions:
  contents: write
  issues: write
  pull-requests: write
  id-token: write

# Define default environment variables for the workflow
env:
  # Core configuration options
  ACT_TRIGGER_KEYWORD: '@act-junior-claude'     # Trigger keyword for issues/PRs
  CLAUDE_MODEL: 'claude-3-7-sonnet-20250219'    # Claude model to use
  BOT_USERNAME: 'ðŸ§  ACT Junior Claude'          # Bot username for comments
  GIT_EMAIL: 'claude@act.house'                 # Git email for commits

# Allow only one concurrent deployment
concurrency:
  group: ${{ github.workflow }}-${{ github.event.issue.number || github.event.pull_request.number || github.run_id }}
  cancel-in-progress: true

jobs:
  solve-issue-w-claude:
    # Run this job when:
    # - @act-junior-claude appears in issue/PR title, OR
    # - @act-junior-claude appears in issue/PR body, OR
    # - @act-junior-claude label is applied, OR
    # - @act-junior-claude mentioned in a comment (not from the bot itself)
    if: >
      (github.event.action == 'labeled' && github.event.label.name == '@act-junior-claude')
      ||
      (github.event.action == 'opened' || github.event.action == 'edited') && 
      (
        contains(github.event.issue.title, '@act-junior-claude') || 
        contains(github.event.pull_request.title, '@act-junior-claude') ||
        contains(github.event.issue.body, '@act-junior-claude') ||
        contains(github.event.pull_request.body, '@act-junior-claude') ||
        contains(toJSON(github.event.issue.labels), '@act-junior-claude') ||
        contains(toJSON(github.event.pull_request.labels), '@act-junior-claude')
      )
      ||
      ((github.event_name == 'issue_comment' || github.event_name == 'pull_request_review_comment') && 
       contains(github.event.comment.body, '@act-junior-claude') && 
       github.event.comment.user.login != 'github-actions[bot]' && 
       !contains(github.event.comment.body, 'I''m analyzing your request'))
    runs-on: ubuntu-latest

    steps:
      - name: Debug Trigger Info
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Event action: ${{ github.event.action }}"
          echo "Repository: ${{ github.repository }}"
          echo "Ref: ${{ github.ref }}"
          echo "Has issue context: ${{ github.event.issue != null }}"
          echo "Has PR context: ${{ github.event.pull_request != null }}"
          echo "Has comment context: ${{ github.event.comment != null }}"
          echo "Trigger keyword: ${{ env.ACT_TRIGGER_KEYWORD }}"
          
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_GITHUB }}
          
      - name: Install required utilities
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Install Claude Code
        run: |
          echo "Installing Claude Code CLI..."
          npm install -g @anthropic-ai/claude-code
          echo "Claude Code installation completed."

      - name: Ensure required labels exist
        uses: ./.github/actions/ensure-labels
        with:
          github-token: ${{ secrets.PAT_GITHUB }}
          labels: |
            [
              {"name": "@act-junior-claude", "color": "5319E7", "description": "Issue to be solved by Claude Code"},
              {"name": "claude-generated", "color": "9480F0", "description": "PR generated by Claude Code"}
            ]

      - name: Extract issue details
        id: issue_info
        env:
          GH_TOKEN: ${{ secrets.PAT_GITHUB }}
          TRIGGER_KEYWORD: ${{ env.ACT_TRIGGER_KEYWORD }}
          EVENT_NAME: ${{ github.event_name }}
          EVENT_PATH: ${{ github.event_path }}
        run: |
          # Create temporary directory
          mkdir -p ./.temp
          
          # Extract issue number based on event type
          if [[ "$EVENT_NAME" == "issues" ]]; then
            ISSUE_NUMBER=$(jq -r .issue.number "$EVENT_PATH")
            ISSUE_TITLE=$(jq -r .issue.title "$EVENT_PATH")
            ISSUE_BODY=$(jq -r .issue.body "$EVENT_PATH")
            
          elif [[ "$EVENT_NAME" == "pull_request" ]]; then
            ISSUE_NUMBER=$(jq -r .pull_request.number "$EVENT_PATH")
            ISSUE_TITLE=$(jq -r .pull_request.title "$EVENT_PATH")
            ISSUE_BODY=$(jq -r .pull_request.body "$EVENT_PATH")
            
          elif [[ "$EVENT_NAME" == "issue_comment" || "$EVENT_NAME" == "pull_request_review_comment" ]]; then
            # For comments, we need to check if they're on an issue or PR
            if [[ $(jq -r 'has("issue")' "$EVENT_PATH") == "true" ]]; then
              ISSUE_NUMBER=$(jq -r .issue.number "$EVENT_PATH")
              ISSUE_TITLE=$(jq -r .issue.title "$EVENT_PATH")
              ISSUE_BODY=$(jq -r .comment.body "$EVENT_PATH")
            else
              ISSUE_NUMBER=$(jq -r .pull_request.number "$EVENT_PATH")
              ISSUE_TITLE=$(jq -r .pull_request.title "$EVENT_PATH")
              ISSUE_BODY=$(jq -r .comment.body "$EVENT_PATH")
            fi
          fi
          
          # Output the extracted information
          echo "issue-number=$ISSUE_NUMBER" >> $GITHUB_OUTPUT
          echo "issue-title=$ISSUE_TITLE" >> $GITHUB_OUTPUT
          
          # Save issue body to a file to handle multi-line content
          echo "$ISSUE_BODY" > ./.temp/issue_body.txt
          echo "issue-body-file=./.temp/issue_body.txt" >> $GITHUB_OUTPUT

      - name: Reply to issue/comment
        env:
          GH_TOKEN: ${{ secrets.PAT_GITHUB }}
          ISSUE_NUMBER: ${{ steps.issue_info.outputs.issue-number }}
          BOT_USERNAME: ${{ env.BOT_USERNAME }}
        run: |
          if [[ -n "$ISSUE_NUMBER" ]]; then
            WORKFLOW_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            MESSAGE="Hi there! I'm ${BOT_USERNAME} and I'm analyzing your request. You can follow my progress at: $WORKFLOW_URL"
            
            gh issue comment "$ISSUE_NUMBER" --body "$MESSAGE"
          fi

      - name: Create solution branch
        id: solution
        run: |
          # Get issue details
          ISSUE_NUMBER="${{ steps.issue_info.outputs.issue-number }}"
          ISSUE_TITLE="${{ steps.issue_info.outputs.issue-title }}"
          ISSUE_BODY_FILE="${{ steps.issue_info.outputs.issue-body-file }}"
          ISSUE_BODY=$(cat "$ISSUE_BODY_FILE")
          TIMESTAMP=$(date +%s)
          
          # Extract target files from issue title and body
          TARGET_FILES=$(echo "$ISSUE_TITLE $ISSUE_BODY" | grep -o -E '(\.js|\.jsx|\.ts|\.tsx|\.md|\.css|\.html|\.json|\.yml|\.yaml)\b' | sort | uniq | tr '\n' ' ')
          
          # Create a branch for the solution
          git checkout -b claude-fix/issue-$ISSUE_NUMBER-$TIMESTAMP
          
          # Create a prompt file for Claude
          mkdir -p ./.temp
          cat << EOF > ./.temp/issue_prompt.txt
          # Issue #$ISSUE_NUMBER: $ISSUE_TITLE
          
          $(cat "$ISSUE_BODY_FILE")
          
          ## Task
          Please analyze this issue and implement a solution. Make the necessary code changes to fix the issue described above.
          
          Focus specifically on the following files if relevant: $TARGET_FILES
          
          Please ensure you:
          1. Only modify the necessary files
          2. Test your changes if applicable
          3. Follow the existing code style and conventions
          4. Consider edge cases in your implementation
          5. Do not commit temporary files or debugging artifacts
          EOF
          
          # Output values for next steps
          echo "branch=claude-fix/issue-$ISSUE_NUMBER-$TIMESTAMP" >> $GITHUB_OUTPUT
          echo "target_files=$TARGET_FILES" >> $GITHUB_OUTPUT

      - name: Run Claude Code
        id: run_claude
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          CLAUDE_MODEL: ${{ env.CLAUDE_MODEL }}
        run: |
          # Create config file for Claude Code
          mkdir -p ~/.claude
          cat << EOF > ~/.claude/config.json
          {
            "defaultModel": "$CLAUDE_MODEL",
            "modelsConfig": {
              "$CLAUDE_MODEL": {
                "modelName": "$CLAUDE_MODEL",
                "provider": "anthropic"
              }
            }
          }
          EOF
          
          # Run Claude Code to solve the issue
          PROMPT_FILE="./.temp/issue_prompt.txt"
          PROMPT=$(cat "$PROMPT_FILE")
          
          set +e  # Don't exit on error
          claude -p "$PROMPT" --allowedTools "Bash(git diff:*)" "Bash(git status:*)" "Edit" "Replace" "GlobTool" "GrepTool" "View"
          CLAUDE_EXIT=$?
          set -e  # Restore exit on error
          
          # Get list of modified files
          MODIFIED_FILES=$(git status --porcelain | grep -v "^??" | grep -v "./.temp/" | awk '{print $2}')
          
          if [ -z "$MODIFIED_FILES" ]; then
            echo "No changes were made by Claude Code"
            echo "success=false" >> $GITHUB_OUTPUT
            echo "modified_files=" >> $GITHUB_OUTPUT
          else
            echo "Modified files: $MODIFIED_FILES"
            echo "success=true" >> $GITHUB_OUTPUT
            echo "modified_files=$MODIFIED_FILES" >> $GITHUB_OUTPUT
          fi

      - name: Check if Claude Code made changes
        if: steps.run_claude.outputs.success == 'false'
        env:
          GH_TOKEN: ${{ secrets.PAT_GITHUB }}
          ISSUE_NUMBER: ${{ steps.issue_info.outputs.issue-number }}
        run: |
          echo "No changes were made by Claude Code, creating a comment on the issue"
          gh issue comment "$ISSUE_NUMBER" --body "I attempted to solve this issue, but couldn't determine what changes to make. A human contributor may need to look at this."
          gh issue edit "$ISSUE_NUMBER" --add-label "needs-human-attention"
          exit 1

      - name: Commit and push changes
        if: steps.run_claude.outputs.success == 'true'
        run: |
          # Configure git
          git config --global user.name "${{ env.BOT_USERNAME }}"
          git config --global user.email "${{ env.GIT_EMAIL }}"
          
          ISSUE_NUMBER="${{ steps.issue_info.outputs.issue-number }}"
          ISSUE_TITLE="${{ steps.issue_info.outputs.issue-title }}"
          MODIFIED_FILES="${{ steps.run_claude.outputs.modified_files }}"
          
          # Stage and commit
          git add $MODIFIED_FILES
          git commit -m "Fix #$ISSUE_NUMBER: $ISSUE_TITLE

          ðŸ§  Generated with ACT Junior Claude"
          
          # Push changes
          git push origin "${{ steps.solution.outputs.branch }}"

      - name: Create Pull Request
        if: steps.run_claude.outputs.success == 'true'
        id: create_pr
        env:
          GH_TOKEN: ${{ secrets.PAT_GITHUB }}
          ISSUE_NUMBER: ${{ steps.issue_info.outputs.issue-number }}
          ISSUE_TITLE: ${{ steps.issue_info.outputs.issue-title }}
          BRANCH_NAME: ${{ steps.solution.outputs.branch }}
        run: |
          # Create PR body
          PR_BODY="Fixes #$ISSUE_NUMBER
          
          This pull request was automatically generated by ${{ env.BOT_USERNAME }} to address the issue.
          
          ## Changes Made
          - Analyzed issue requirements
          - Applied necessary code changes
          - Tested the solution
          
          This PR was created by ACT Junior Claude using the Claude ${{ env.CLAUDE_MODEL }} model.
          
          Please review the changes and provide feedback."
          
          # Create the PR
          PR_URL=$(gh pr create --title "Fix: $ISSUE_TITLE" \
                             --body "$PR_BODY" \
                             --base main \
                             --head "$BRANCH_NAME" \
                             --label "claude-generated")
          
          echo "PR created: $PR_URL"
          echo "pull-request-url=$PR_URL" >> $GITHUB_OUTPUT
          
          # Comment on the issue with a link to the PR
          gh issue comment "$ISSUE_NUMBER" --body "I've created a pull request to address this issue: $PR_URL

          The solution was implemented using Claude Code. Please review the changes and let me know if you need any adjustments."

      - name: Cleanup
        if: always()
        run: |
          # Clean up temporary files
          rm -rf ./.temp
          
          echo "Cleanup completed"